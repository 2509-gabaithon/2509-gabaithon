

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";





SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."accessary" (
    "id" bigint NOT NULL,
    "name" "text"
);


ALTER TABLE "public"."accessary" OWNER TO "postgres";


ALTER TABLE "public"."accessary" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."accessary_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."nyuyoku_log" (
    "user_id" "uuid" NOT NULL,
    "total_ms" bigint,
    "started_at" timestamp with time zone NOT NULL,
    "ended_at" timestamp with time zone NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "onsen_name" "text",
    "onsen_place_id" "text" NOT NULL,
    "onsen_lat" double precision,
    "onsen_lng" double precision
);


ALTER TABLE "public"."nyuyoku_log" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."partner" (
    "id" bigint NOT NULL,
    "name" "text" DEFAULT 'もちもちうさぎ'::"text"
);


ALTER TABLE "public"."partner" OWNER TO "postgres";


ALTER TABLE "public"."partner" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."partner_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."profile" (
    "name" "text" DEFAULT ''::"text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "id" "uuid"
);


ALTER TABLE "public"."profile" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."quest" (
    "id" bigint NOT NULL,
    "name" "text",
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."quest" OWNER TO "postgres";


ALTER TABLE "public"."quest" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."quest_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."quest_onsen" (
    "id" bigint NOT NULL,
    "place_id" "text" NOT NULL,
    "lat" double precision,
    "lng" double precision,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "quest_id" bigint
);


ALTER TABLE "public"."quest_onsen" OWNER TO "postgres";


ALTER TABLE "public"."quest_onsen" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."quest_onsen_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."quest_submission" (
    "user_id" "uuid" NOT NULL,
    "quest_id" bigint,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."quest_submission" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_accessary" (
    "user_id" "uuid" NOT NULL,
    "accessary_id" bigint,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL
);


ALTER TABLE "public"."user_accessary" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."user_partner" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" DEFAULT ''::"text",
    "exp" bigint DEFAULT '0'::bigint,
    "happiness" integer DEFAULT 75,
    "user_id" "uuid",
    "partner_id" bigint
);


ALTER TABLE "public"."user_partner" OWNER TO "postgres";


ALTER TABLE "public"."user_partner" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."user_partner_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE ONLY "public"."accessary"
    ADD CONSTRAINT "accessary_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."nyuyoku_log"
    ADD CONSTRAINT "nyuyoku_log_pkey" PRIMARY KEY ("user_id");



ALTER TABLE ONLY "public"."partner"
    ADD CONSTRAINT "partner_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."quest_onsen"
    ADD CONSTRAINT "quest_onsen_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."quest"
    ADD CONSTRAINT "quest_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."quest_submission"
    ADD CONSTRAINT "quest_submission_pkey" PRIMARY KEY ("user_id");



ALTER TABLE ONLY "public"."user_accessary"
    ADD CONSTRAINT "user_accessary_pkey" PRIMARY KEY ("user_id");



ALTER TABLE ONLY "public"."user_partner"
    ADD CONSTRAINT "user_partner_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."nyuyoku_log"
    ADD CONSTRAINT "nyuyoku_log_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profile"
    ADD CONSTRAINT "profile_id_fkey" FOREIGN KEY ("id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."quest_onsen"
    ADD CONSTRAINT "quest_onsen_quest_id_fkey" FOREIGN KEY ("quest_id") REFERENCES "public"."quest"("id");



ALTER TABLE ONLY "public"."quest_submission"
    ADD CONSTRAINT "quest_submission_quest_id_fkey" FOREIGN KEY ("quest_id") REFERENCES "public"."quest"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."quest_submission"
    ADD CONSTRAINT "quest_submission_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_accessary"
    ADD CONSTRAINT "user_accessary_accessary_id_fkey" FOREIGN KEY ("accessary_id") REFERENCES "public"."accessary"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_accessary"
    ADD CONSTRAINT "user_accessary_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



ALTER TABLE ONLY "public"."user_partner"
    ADD CONSTRAINT "user_partner_partner_id_fkey" FOREIGN KEY ("partner_id") REFERENCES "public"."partner"("id");



ALTER TABLE ONLY "public"."user_partner"
    ADD CONSTRAINT "user_partner_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE ON DELETE CASCADE;



CREATE POLICY "Enable read access for all users" ON "public"."partner" FOR SELECT USING (true);



ALTER TABLE "public"."accessary" ENABLE ROW LEVEL SECURITY;


CREATE POLICY "allow ALL when id=uid" ON "public"."nyuyoku_log" TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "allow ALL when id=uid" ON "public"."profile" TO "authenticated" USING (("auth"."uid"() = "id")) WITH CHECK (("auth"."uid"() = "id"));



CREATE POLICY "allow ALL when id=uid" ON "public"."quest_submission" FOR SELECT USING (("auth"."uid"() = "user_id"));



CREATE POLICY "allow ALL when id=uid" ON "public"."user_partner" TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "allow ALL when user_id=uid" ON "public"."user_accessary" TO "authenticated" USING (("auth"."uid"() = "user_id")) WITH CHECK (("auth"."uid"() = "user_id"));



CREATE POLICY "allow read" ON "public"."accessary" FOR SELECT USING (true);



CREATE POLICY "allow read" ON "public"."quest" FOR SELECT USING (true);



CREATE POLICY "allow read" ON "public"."quest_onsen" FOR SELECT USING (true);



ALTER TABLE "public"."nyuyoku_log" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."partner" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profile" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."quest" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."quest_onsen" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."quest_submission" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."user_accessary" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."user_partner" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";


ALTER PUBLICATION "supabase_realtime" ADD TABLE ONLY "public"."profile";






GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";














































































































































































GRANT ALL ON TABLE "public"."accessary" TO "anon";
GRANT ALL ON TABLE "public"."accessary" TO "authenticated";
GRANT ALL ON TABLE "public"."accessary" TO "service_role";



GRANT ALL ON SEQUENCE "public"."accessary_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."accessary_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."accessary_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."nyuyoku_log" TO "anon";
GRANT ALL ON TABLE "public"."nyuyoku_log" TO "authenticated";
GRANT ALL ON TABLE "public"."nyuyoku_log" TO "service_role";



GRANT ALL ON TABLE "public"."partner" TO "anon";
GRANT ALL ON TABLE "public"."partner" TO "authenticated";
GRANT ALL ON TABLE "public"."partner" TO "service_role";



GRANT ALL ON SEQUENCE "public"."partner_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."partner_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."partner_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."profile" TO "anon";
GRANT ALL ON TABLE "public"."profile" TO "authenticated";
GRANT ALL ON TABLE "public"."profile" TO "service_role";



GRANT ALL ON TABLE "public"."quest" TO "anon";
GRANT ALL ON TABLE "public"."quest" TO "authenticated";
GRANT ALL ON TABLE "public"."quest" TO "service_role";



GRANT ALL ON SEQUENCE "public"."quest_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."quest_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."quest_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."quest_onsen" TO "anon";
GRANT ALL ON TABLE "public"."quest_onsen" TO "authenticated";
GRANT ALL ON TABLE "public"."quest_onsen" TO "service_role";



GRANT ALL ON SEQUENCE "public"."quest_onsen_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."quest_onsen_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."quest_onsen_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."quest_submission" TO "anon";
GRANT ALL ON TABLE "public"."quest_submission" TO "authenticated";
GRANT ALL ON TABLE "public"."quest_submission" TO "service_role";



GRANT ALL ON TABLE "public"."user_accessary" TO "anon";
GRANT ALL ON TABLE "public"."user_accessary" TO "authenticated";
GRANT ALL ON TABLE "public"."user_accessary" TO "service_role";



GRANT ALL ON TABLE "public"."user_partner" TO "anon";
GRANT ALL ON TABLE "public"."user_partner" TO "authenticated";
GRANT ALL ON TABLE "public"."user_partner" TO "service_role";



GRANT ALL ON SEQUENCE "public"."user_partner_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."user_partner_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."user_partner_id_seq" TO "service_role";









ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES TO "service_role";






























RESET ALL;
